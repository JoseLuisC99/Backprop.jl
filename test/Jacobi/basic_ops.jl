using Test
import Backprop: Jacobi
import Backprop.Jacobi: Tensor as Tensor, ⊙ as ⊙

@testset "Square root and reciprocal" begin
    a = Tensor([-1.2682 0.4133 2.2894 0.7821;
         1.2522 0.6999 -0.4514 -1.0327;
        -0.0326 1.6305  1.1334  0.2879], requires_grad=true)
    b = Tensor([-0.0991 -0.1337 -1.1308;
        -1.0464  0.0141 -0.1314;
         0.4380 -1.0526  0.1453;
         1.6421 -2.6873  1.4708], requires_grad=true)
    c = Tensor([1.5517 -0.9088 0.8124;
        1.3773 -0.6192  2.0024;
        0.7790 -0.1417 -0.7258], requires_grad=true)

    t = Jacobi.reciprocal(a * b + c)
    Jacobi.backward(t)
    @test t ≈ Tensor([0.2831 -0.1907  0.2721;
        -0.7285  0.4043 -0.9174;
        22.0920 -0.4805 -3.1740]) atol=1e-3
    @test a.grad ≈ Tensor([9.6526e-02 9.3098e-02 -7.6061e-03 -1.4284e-01;
        1.0262e+00 6.6363e-01 -1.8271e-01 -1.6701e+00;
        5.9789e+01 5.1202e+02 -2.1499e+02 -8.1563e+02]) atol=1e-2
    @test b.grad ≈ Tensor([1.5348e+01 -1.5103e-01 -6.3156e-01;
        -7.9618e+02 -5.0591e-01 -1.7046e+01;
        -5.5311e+02 -2.7116e-01 -1.1208e+01;
        -1.4003e+02  7.3874e-02 -2.0892e+00]) atol=1e-2
    @test c.grad ≈ Tensor([-8.0163e-02 -3.6351e-02 -7.4038e-02;
        -5.3072e-01 -1.6344e-01 -8.4162e-01;
        -4.8806e+02 -2.3091e-01 -1.0074e+01]) atol=1e-2
    Jacobi.zero_grad(t)

    # t = sqrt(a * b + c)
    # Jacobi.backward(t)
    # @test t ≈ Tensor([0.2831 -0.1907  0.2721;
    #     -0.7285  0.4043 -0.9174;
    #     22.0920 -0.4805 -3.1740]) atol=1e-3
    # @test a.grad ≈ Tensor([9.6526e-02 9.3098e-02 -7.6061e-03 -1.4284e-01;
    #     1.0262e+00 6.6363e-01 -1.8271e-01 -1.6701e+00;
    #     5.9789e+01 5.1202e+02 -2.1499e+02 -8.1563e+02]) atol=1e-2
    # @test b.grad ≈ Tensor([1.5348e+01 -1.5103e-01 -6.3156e-01;
    #     -7.9618e+02 -5.0591e-01 -1.7046e+01;
    #     -5.5311e+02 -2.7116e-01 -1.1208e+01;
    #     -1.4003e+02  7.3874e-02 -2.0892e+00]) atol=1e-2
    # @test c.grad ≈ Tensor([-8.0163e-02 -3.6351e-02 -7.4038e-02;
    #     -5.3072e-01 -1.6344e-01 -8.4162e-01;
    #     -4.8806e+02 -2.3091e-01 -1.0074e+01]) atol=1e-2
    # Jacobi.zero_grad(t)
end

@testset "Exp and log functions" begin
    a = Tensor([-1.2682 0.4133 2.2894 0.7821;
         1.2522 0.6999 -0.4514 -1.0327;
        -0.0326 1.6305  1.1334  0.2879], requires_grad=true)
    b = Tensor([-0.0991 -0.1337 -1.1308;
        -1.0464  0.0141 -0.1314;
         0.4380 -1.0526  0.1453;
         1.6421 -2.6873  1.4708], requires_grad=true)
    c = Tensor([1.5517 -0.9088 0.8124;
        1.3773 -0.6192  2.0024;
        0.7790 -0.1417 -0.7258], requires_grad=true)
    
    # @test log(a + b) ≈ Tensor([0.6942 1.1741 1.3478 0.1261;
    #     0.9584 0.1740 0.4305 -0.4175;
    #     1.0642 1.0418 0.8312 1.0621;
    #     0.9436 1.0398 1.3568 0.6356]) atol=1e-3
    # @test log2(a + b) ≈ Tensor([1.0015 1.6939 1.9444 0.1819;
    #     1.3827 0.2511 0.6211 -0.6023;
    #     1.5354 1.5030 1.1992 1.5322;
    #     1.3613 1.5001 1.9575 0.9170]) atol=1e-3
    # @test log10(a + b) ≈ Tensor([0.3015 0.5099 0.5853 0.0548;
    #     0.4162 0.0756 0.1870 -0.1813;
    #     0.4622 0.4525 0.3610 0.4612;
    #     0.4098 0.4516 0.5893 0.2760]) atol=1e-3
    # @test exp(x + y) ≈ Tensor([1.7727e+01 1.1991e-01 1.8468e+03 1.5000e-04;
    #     7.8399e-05 2.6278e+03 3.8179e+00 5.9877e+00;
    #     2.0751e+00 5.0006e-03 3.0038e-01 1.4878e-01;
    #     1.0277e-03 9.6308e-02 7.1873e+01 3.6149e-02]) rtol=1e-3
    
    t = exp(a * b + c)
    Jacobi.backward(t)
    @test t ≈ Tensor([3.4190e+01 5.2740e-03 3.9454e+01;
        2.5343e-01 1.1865e+01 3.3620e-01;
        1.0463e+00 1.2480e-01 7.2975e-01]) atol=1e-3
    @test a.grad ≈ Tensor([-48.0036 -40.9610 20.7025 114.1589;
        -1.9916  -0.1421 -12.3289 -30.9734;
        -0.9456  -1.1890   0.4329   2.4561]) atol=1e-2
    @test b.grad ≈ Tensor([-43.0770 14.8462 -49.6384;
        16.0143   8.5098 17.7315;
        79.3470  -5.2022 91.0013;
        26.7798 -12.2126 30.7199]) atol=1e-2
    @test c.grad ≈ Tensor([3.4190e+01 5.2740e-03 3.9454e+01;
        2.5343e-01 1.1865e+01 3.3620e-01;
        1.0463e+00 1.2480e-01 7.2975e-01]) atol=1e-2
    Jacobi.zero_grad(t)
end