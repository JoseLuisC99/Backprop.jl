using Test
import Backprop: Jacobi
import Backprop.Jacobi: Tensor as Tensor, ⊙ as ⊙

@testset "ReLU, abs, sing and clamp" begin
    a = Tensor([-0.6952  0.7402  1.0230  1.0980 -0.2954;
        -0.1393  0.2698 -1.2053  0.1689  0.5245;
         0.6325 -2.1261 -0.3915 -0.2651 -2.6393;
         1.0331 -0.2566  0.9003 -0.7683  0.5209;
        -1.3129 -1.4920 -0.4943  0.2378  1.4655], requires_grad=true)
    b = Tensor([1.1522 -0.6649 -2.3477 -0.5182 -0.0801;
         0.2677 -0.2388 -1.0562  1.4917  1.8753;
        -0.4299  0.6285  1.3538 -0.6436  1.3562;
         1.2945  1.2706  1.4878  1.1928 -1.4192;
        -0.0069 -1.0086 -1.7845 -0.8728  2.2078], requires_grad=true)
    c = Tensor([-0.9375 -0.7882 -1.0941  1.1631  1.0990;
         0.4606 -0.7650  0.4314  1.1247  0.6326;
        -0.3426  2.1637 -0.7049 -0.6188 -1.8921;
         1.2071  0.3337  0.0904 -0.7059  0.2790;
        -0.1160  1.4463 -0.0761  0.0308  0.4501], requires_grad=true)
    
    t = Jacobi.relu(a * b + c)
    Jacobi.backward!(t)
    @test t ≈ Tensor([0.0000 1.8333 3.3019 3.5366 1.7197;
        1.1055 0.0000 0.0000 2.1188 0.4334;
        0.0000 4.3300 3.8412 0.0000 0.0000;
        0.9435 0.0000 0.0000 0.0000 3.1764;
        0.0000 1.1889 1.6515 0.0000 0.0000]) atol=1e-3
    @test a.grad ≈ Tensor([-3.6109  2.0720  2.6949  2.5320 -1.4581;
         0.5539  3.6347  0.2827  1.0681  1.3281;
        -3.0126 -1.2950  1.9823  2.7584 -2.7931;
         1.0721  2.1430  0.9263 -0.1247  2.2009;
        -3.0126 -1.2950  1.9823  2.7584 -2.7931]) atol=1e-3
    @test b.grad ≈ Tensor([0.8938 -1.3756 -1.3756 -0.8345  0.1986;
         0.0132 -2.8779 -2.8779  1.0100  0.7534;
        -0.3050  0.1372  0.1372 -0.1823  0.7180;
        -0.5994  1.0707  1.0707  1.2669  0.4986;
         1.0454 -1.4692 -1.4692  0.2291  0.7500]) atol=1e-3
    @test c.grad ≈ Tensor([0.0 1.0 1.0 1.0 1.0;
        1.0 0.0 0.0 1.0 1.0;
        0.0 1.0 1.0 0.0 0.0;
        1.0 0.0 0.0 0.0 1.0;
        0.0 1.0 1.0 0.0 0.0]) atol=1e-3
    Jacobi.zero_grad(t)

    t = abs(a * b + c)
    Jacobi.backward!(t)
    @test t ≈ Tensor([0.5567  1.8333  3.3019  3.5366  1.7197;
        1.1055  1.8087  1.8429  2.1188  0.4334;
        0.3396  4.3300  3.8412  1.8787 11.9116;
        0.9435  1.2277  2.9178  3.5745  3.1764;
        1.5179  1.1889  1.6515  2.1918  0.0150]) atol=1e-3
    @test a.grad ≈ Tensor([-4.7631 1.8043 3.1248 1.2375 -1.4512;
         3.5665  4.9297 -1.6996 -1.6903  4.1212;
        -3.5665 -4.9297  1.6996  1.6903 -4.1212;
         4.6029  1.9463 -0.4124 -4.0759  5.8668;
        -3.5665 -4.9297  1.6996  1.6903 -4.1212]) atol=1e-3
    @test b.grad ≈ Tensor([2.2694 -2.2694 -2.2694 -1.1872 0.8790;
        2.8911 -2.8911 -2.8911  4.8847  4.3715;
        -0.4422  0.4422  0.4422 -0.1968  1.6038;
        -1.6701  1.6701  1.6701  2.0625  0.5259;
        2.5146 -2.5146 -2.5146  0.8820  1.9238]) atol=1e-3
    @test c.grad ≈ Tensor([-1.  1.  1.  1.  1.;
         1. -1. -1.  1.  1.;
        -1.  1.  1. -1. -1.;
         1. -1. -1. -1.  1.;
        -1.  1.  1. -1. -1.]) atol=1e-3
    Jacobi.zero_grad(t)

    t = sign(a * b + c)
    Jacobi.backward!(t)
    @test t ≈ Tensor([-1. 1. 1. 1. 1.;
         1. -1. -1.  1.  1.;
        -1.  1.  1. -1. -1.;
         1. -1. -1. -1.  1.;
        -1.  1.  1. -1. -1.])
    @test a.grad ≈ Jacobi.zeros_like(a.grad) atol=1e-10
    @test b.grad ≈ Jacobi.zeros_like(b.grad) atol=1e-10
    @test c.grad ≈ Jacobi.zeros_like(c.grad) atol=1e-10
    Jacobi.zero_grad(t)

    t = Jacobi.clamp(a * b + c, -2.0, 2.0)
    Jacobi.backward!(t)
    @test t ≈ Tensor([-0.5567  1.8333  2.0000  2.0000  1.7197;
         1.1055 -1.8087 -1.8429  2.0000  0.4334;
        -0.3396  2.0000  2.0000 -1.8787 -2.0000;
         0.9435 -1.2277 -2.0000 -2.0000  2.0000;
        -1.5179  1.1889  1.6515 -2.0000 -0.0150]) atol=1e-3
    @test a.grad ≈ Tensor([0.4072  1.9042  1.5548  1.1459  1.1923;
        -1.9405  0.8480  2.9086  2.6337 -0.5922;
         0.6340  1.7594 -1.0735  2.4873 -0.8797;
         0.4873  0.0289  0.1986  2.5651 -1.0155;
        -1.9405  0.8480  2.9086  2.6337 -0.5922]) atol=1e-3
    @test b.grad ≈ Tensor([-0.4818 -1.1143 -1.4522  0.6325 -2.1474;
        -2.8647 -0.7386 -1.2222 -2.1261 -0.4820;
        -0.1678  0.2237 -1.6996 -0.3915 -0.6766;
         0.4713  0.7364  0.4067 -0.2651  1.5047;
        -0.4238  2.2155  1.9900 -2.6393  1.6946]) atol=1e-3
    @test c.grad ≈ Tensor([1. 1. 0. 0. 1.;
        1. 1. 1. 0. 1.;
        1. 0. 0. 1. 0.;
        1. 1. 0. 0. 0.;
        1. 1. 1. 0. 1.]) atol=1e-3
    Jacobi.zero_grad(t)
end